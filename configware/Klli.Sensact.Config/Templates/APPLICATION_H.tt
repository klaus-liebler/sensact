<#@ template language="C#" inherits="CommonFileHeader" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# RenderHeader("Application.h", "autogen", version, "Short", "Details"); #>
#pragma once
#include "common.h"
#include "stddef.h"
#define Name N()
namespace sensact {

class cApplication {
public:
	eApplicationID Id;

<#=CommandHeaders#>

	virtual eAppType GetAppType()=0;
	virtual eAppCallResult Setup()=0;
	virtual eAppCallResult DoEachCycle(Time_t time, uint8_t *statusBuffer, size_t *statusBufferLength)=0; //has to be called cyclically
	eAppCallResult OnCommand(eCommandType cmd, const uint8_t * const payload, uint8_t payloadLength, Time_t now);
	virtual eAppCallResult OnEvent(eApplicationID sender, eEventType evt, const uint8_t * const payload, uint8_t payloadLength, Time_t now);
	cApplication(const eApplicationID id);
	char const*const NN(eApplicationID appID);
	char const*const N();
	char const*const N4I(uint32_t appID);
	virtual ~cApplication() {
		return;
	}
};
}
