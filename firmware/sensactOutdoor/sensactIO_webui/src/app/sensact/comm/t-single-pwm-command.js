"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.tSinglePwmCommand = void 0;
var flatbuffers = require("flatbuffers");
var e_single_pwm_command_js_1 = require("../../sensact/comm/e-single-pwm-command.js");
var tSinglePwmCommand = /** @class */ (function () {
    function tSinglePwmCommand() {
        this.bb = null;
        this.bb_pos = 0;
    }
    tSinglePwmCommand.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    tSinglePwmCommand.getRootAstSinglePwmCommand = function (bb, obj) {
        return (obj || new tSinglePwmCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    tSinglePwmCommand.getSizePrefixedRootAstSinglePwmCommand = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new tSinglePwmCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    tSinglePwmCommand.prototype.cmd = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : e_single_pwm_command_js_1.eSinglePwmCommand.TOGGLE;
    };
    tSinglePwmCommand.prototype.intensity01 = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    tSinglePwmCommand.starttSinglePwmCommand = function (builder) {
        builder.startObject(2);
    };
    tSinglePwmCommand.addCmd = function (builder, cmd) {
        builder.addFieldInt8(0, cmd, e_single_pwm_command_js_1.eSinglePwmCommand.TOGGLE);
    };
    tSinglePwmCommand.addIntensity01 = function (builder, intensity01) {
        builder.addFieldFloat32(1, intensity01, 0.0);
    };
    tSinglePwmCommand.endtSinglePwmCommand = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    tSinglePwmCommand.createtSinglePwmCommand = function (builder, cmd, intensity01) {
        tSinglePwmCommand.starttSinglePwmCommand(builder);
        tSinglePwmCommand.addCmd(builder, cmd);
        tSinglePwmCommand.addIntensity01(builder, intensity01);
        return tSinglePwmCommand.endtSinglePwmCommand(builder);
    };
    return tSinglePwmCommand;
}());
exports.tSinglePwmCommand = tSinglePwmCommand;
