"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.tBlindConfig = void 0;
var flatbuffers = require("flatbuffers");
var e_relay_interlock_mode_js_1 = require("../../sensact/comm/e-relay-interlock-mode.js");
var tBlindConfig = /** @class */ (function () {
    function tBlindConfig() {
        this.bb = null;
        this.bb_pos = 0;
    }
    tBlindConfig.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    tBlindConfig.getRootAstBlindConfig = function (bb, obj) {
        return (obj || new tBlindConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    tBlindConfig.getSizePrefixedRootAstBlindConfig = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new tBlindConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    tBlindConfig.prototype.relay1 = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    };
    tBlindConfig.prototype.relay2 = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    };
    tBlindConfig.prototype.mode = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : e_relay_interlock_mode_js_1.eRelayInterlockMode.R1_UP__R2_DOWN;
    };
    tBlindConfig.prototype.timeUpMsecs = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    tBlindConfig.prototype.timeDownMsecs = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    tBlindConfig.starttBlindConfig = function (builder) {
        builder.startObject(5);
    };
    tBlindConfig.addRelay1 = function (builder, relay1) {
        builder.addFieldInt16(0, relay1, 0);
    };
    tBlindConfig.addRelay2 = function (builder, relay2) {
        builder.addFieldInt16(1, relay2, 0);
    };
    tBlindConfig.addMode = function (builder, mode) {
        builder.addFieldInt8(2, mode, e_relay_interlock_mode_js_1.eRelayInterlockMode.R1_UP__R2_DOWN);
    };
    tBlindConfig.addTimeUpMsecs = function (builder, timeUpMsecs) {
        builder.addFieldInt32(3, timeUpMsecs, 0);
    };
    tBlindConfig.addTimeDownMsecs = function (builder, timeDownMsecs) {
        builder.addFieldInt32(4, timeDownMsecs, 0);
    };
    tBlindConfig.endtBlindConfig = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    tBlindConfig.createtBlindConfig = function (builder, relay1, relay2, mode, timeUpMsecs, timeDownMsecs) {
        tBlindConfig.starttBlindConfig(builder);
        tBlindConfig.addRelay1(builder, relay1);
        tBlindConfig.addRelay2(builder, relay2);
        tBlindConfig.addMode(builder, mode);
        tBlindConfig.addTimeUpMsecs(builder, timeUpMsecs);
        tBlindConfig.addTimeDownMsecs(builder, timeDownMsecs);
        return tBlindConfig.endtBlindConfig(builder);
    };
    return tBlindConfig;
}());
exports.tBlindConfig = tBlindConfig;
