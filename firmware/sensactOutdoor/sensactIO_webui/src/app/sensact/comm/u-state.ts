// automatically generated by the FlatBuffers compiler, do not modify

import { tBlindState } from '../../sensact/comm/t-blind-state.js';
import { tOnOffState } from '../../sensact/comm/t-on-off-state.js';
import { tRgbwPwmState } from '../../sensact/comm/t-rgbw-pwm-state.js';
import { tSinglePwmState } from '../../sensact/comm/t-single-pwm-state.js';


export enum uState {
  NONE = 0,
  tBlindState = 1,
  tSinglePwmState = 2,
  tOnOffState = 3,
  tRgbwPwmState = 4
}

export function unionTouState(
  type: uState,
  accessor: (obj:tBlindState|tOnOffState|tRgbwPwmState|tSinglePwmState) => tBlindState|tOnOffState|tRgbwPwmState|tSinglePwmState|null
): tBlindState|tOnOffState|tRgbwPwmState|tSinglePwmState|null {
  switch(uState[type]) {
    case 'NONE': return null; 
    case 'tBlindState': return accessor(new tBlindState())! as tBlindState;
    case 'tSinglePwmState': return accessor(new tSinglePwmState())! as tSinglePwmState;
    case 'tOnOffState': return accessor(new tOnOffState())! as tOnOffState;
    case 'tRgbwPwmState': return accessor(new tRgbwPwmState())! as tRgbwPwmState;
    default: return null;
  }
}

export function unionListTouState(
  type: uState, 
  accessor: (index: number, obj:tBlindState|tOnOffState|tRgbwPwmState|tSinglePwmState) => tBlindState|tOnOffState|tRgbwPwmState|tSinglePwmState|null, 
  index: number
): tBlindState|tOnOffState|tRgbwPwmState|tSinglePwmState|null {
  switch(uState[type]) {
    case 'NONE': return null; 
    case 'tBlindState': return accessor(index, new tBlindState())! as tBlindState;
    case 'tSinglePwmState': return accessor(index, new tSinglePwmState())! as tSinglePwmState;
    case 'tOnOffState': return accessor(index, new tOnOffState())! as tOnOffState;
    case 'tRgbwPwmState': return accessor(index, new tRgbwPwmState())! as tRgbwPwmState;
    default: return null;
  }
}
