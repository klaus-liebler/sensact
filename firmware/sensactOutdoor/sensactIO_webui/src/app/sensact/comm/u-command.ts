// automatically generated by the FlatBuffers compiler, do not modify

import { tBlindCommand } from '../../sensact/comm/t-blind-command.js';
import { tOnOffCommand } from '../../sensact/comm/t-on-off-command.js';
import { tRgbwPwmCommand } from '../../sensact/comm/t-rgbw-pwm-command.js';
import { tSinglePwmCommand } from '../../sensact/comm/t-single-pwm-command.js';


export enum uCommand {
  NONE = 0,
  tBlindCommand = 1,
  tSinglePwmCommand = 2,
  tOnOffCommand = 3,
  tRgbwPwmCommand = 4
}

export function unionTouCommand(
  type: uCommand,
  accessor: (obj:tBlindCommand|tOnOffCommand|tRgbwPwmCommand|tSinglePwmCommand) => tBlindCommand|tOnOffCommand|tRgbwPwmCommand|tSinglePwmCommand|null
): tBlindCommand|tOnOffCommand|tRgbwPwmCommand|tSinglePwmCommand|null {
  switch(uCommand[type]) {
    case 'NONE': return null; 
    case 'tBlindCommand': return accessor(new tBlindCommand())! as tBlindCommand;
    case 'tSinglePwmCommand': return accessor(new tSinglePwmCommand())! as tSinglePwmCommand;
    case 'tOnOffCommand': return accessor(new tOnOffCommand())! as tOnOffCommand;
    case 'tRgbwPwmCommand': return accessor(new tRgbwPwmCommand())! as tRgbwPwmCommand;
    default: return null;
  }
}

export function unionListTouCommand(
  type: uCommand, 
  accessor: (index: number, obj:tBlindCommand|tOnOffCommand|tRgbwPwmCommand|tSinglePwmCommand) => tBlindCommand|tOnOffCommand|tRgbwPwmCommand|tSinglePwmCommand|null, 
  index: number
): tBlindCommand|tOnOffCommand|tRgbwPwmCommand|tSinglePwmCommand|null {
  switch(uCommand[type]) {
    case 'NONE': return null; 
    case 'tBlindCommand': return accessor(index, new tBlindCommand())! as tBlindCommand;
    case 'tSinglePwmCommand': return accessor(index, new tSinglePwmCommand())! as tSinglePwmCommand;
    case 'tOnOffCommand': return accessor(index, new tOnOffCommand())! as tOnOffCommand;
    case 'tRgbwPwmCommand': return accessor(index, new tRgbwPwmCommand())! as tRgbwPwmCommand;
    default: return null;
  }
}
