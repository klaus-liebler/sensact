// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { tStateWrapper } from '../../sensact/comm/t-state-wrapper.js';


export class tState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):tState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAstState(bb:flatbuffers.ByteBuffer, obj?:tState):tState {
  return (obj || new tState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAstState(bb:flatbuffers.ByteBuffer, obj?:tState):tState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new tState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SSTA');
}

timestamp():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

states(index: number, obj?:tStateWrapper):tStateWrapper|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new tStateWrapper()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

statesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static starttState(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:number) {
  builder.addFieldInt32(0, timestamp, 0);
}

static addStates(builder:flatbuffers.Builder, statesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, statesOffset, 0);
}

static createStatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endtState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishtStateBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SSTA');
}

static finishSizePrefixedtStateBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SSTA', true);
}

static createtState(builder:flatbuffers.Builder, timestamp:number, statesOffset:flatbuffers.Offset):flatbuffers.Offset {
  tState.starttState(builder);
  tState.addTimestamp(builder, timestamp);
  tState.addStates(builder, statesOffset);
  return tState.endtState(builder);
}
}
