// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { uState, unionTouState, unionListTouState } from '../../sensact/comm/u-state.js';


export class tStateWrapper {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):tStateWrapper {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAstStateWrapper(bb:flatbuffers.ByteBuffer, obj?:tStateWrapper):tStateWrapper {
  return (obj || new tStateWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAstStateWrapper(bb:flatbuffers.ByteBuffer, obj?:tStateWrapper):tStateWrapper {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new tStateWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

applicationId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

stateType():uState {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : uState.NONE;
}

state<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static starttStateWrapper(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addApplicationId(builder:flatbuffers.Builder, applicationId:number) {
  builder.addFieldInt32(0, applicationId, 0);
}

static addStateType(builder:flatbuffers.Builder, stateType:uState) {
  builder.addFieldInt8(1, stateType, uState.NONE);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, stateOffset, 0);
}

static endtStateWrapper(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createtStateWrapper(builder:flatbuffers.Builder, applicationId:number, stateType:uState, stateOffset:flatbuffers.Offset):flatbuffers.Offset {
  tStateWrapper.starttStateWrapper(builder);
  tStateWrapper.addApplicationId(builder, applicationId);
  tStateWrapper.addStateType(builder, stateType);
  tStateWrapper.addState(builder, stateOffset);
  return tStateWrapper.endtStateWrapper(builder);
}
}
