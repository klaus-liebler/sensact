// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class tSinglePwmConfig {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):tSinglePwmConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAstSinglePwmConfig(bb:flatbuffers.ByteBuffer, obj?:tSinglePwmConfig):tSinglePwmConfig {
  return (obj || new tSinglePwmConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAstSinglePwmConfig(bb:flatbuffers.ByteBuffer, obj?:tSinglePwmConfig):tSinglePwmConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new tSinglePwmConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pwmFirst():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

pwmLast():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

idOfStandbyController():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

autoOffMsecs():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static starttSinglePwmConfig(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addPwmFirst(builder:flatbuffers.Builder, pwmFirst:number) {
  builder.addFieldInt16(0, pwmFirst, 0);
}

static addPwmLast(builder:flatbuffers.Builder, pwmLast:number) {
  builder.addFieldInt16(1, pwmLast, 0);
}

static addIdOfStandbyController(builder:flatbuffers.Builder, idOfStandbyController:number) {
  builder.addFieldInt16(2, idOfStandbyController, 0);
}

static addAutoOffMsecs(builder:flatbuffers.Builder, autoOffMsecs:number) {
  builder.addFieldInt32(3, autoOffMsecs, 0);
}

static endtSinglePwmConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createtSinglePwmConfig(builder:flatbuffers.Builder, pwmFirst:number, pwmLast:number, idOfStandbyController:number, autoOffMsecs:number):flatbuffers.Offset {
  tSinglePwmConfig.starttSinglePwmConfig(builder);
  tSinglePwmConfig.addPwmFirst(builder, pwmFirst);
  tSinglePwmConfig.addPwmLast(builder, pwmLast);
  tSinglePwmConfig.addIdOfStandbyController(builder, idOfStandbyController);
  tSinglePwmConfig.addAutoOffMsecs(builder, autoOffMsecs);
  return tSinglePwmConfig.endtSinglePwmConfig(builder);
}
}
