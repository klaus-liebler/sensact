// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class tRgbwPwmConfig {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):tRgbwPwmConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAstRgbwPwmConfig(bb:flatbuffers.ByteBuffer, obj?:tRgbwPwmConfig):tRgbwPwmConfig {
  return (obj || new tRgbwPwmConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAstRgbwPwmConfig(bb:flatbuffers.ByteBuffer, obj?:tRgbwPwmConfig):tRgbwPwmConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new tRgbwPwmConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pwmR():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

pwmG():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

pwmB():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

pwmWw():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

pwmCw():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

idOfStandbyController():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

autoOffMsecs():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static starttRgbwPwmConfig(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addPwmR(builder:flatbuffers.Builder, pwmR:number) {
  builder.addFieldInt16(0, pwmR, 0);
}

static addPwmG(builder:flatbuffers.Builder, pwmG:number) {
  builder.addFieldInt16(1, pwmG, 0);
}

static addPwmB(builder:flatbuffers.Builder, pwmB:number) {
  builder.addFieldInt16(2, pwmB, 0);
}

static addPwmWw(builder:flatbuffers.Builder, pwmWw:number) {
  builder.addFieldInt16(3, pwmWw, 0);
}

static addPwmCw(builder:flatbuffers.Builder, pwmCw:number) {
  builder.addFieldInt16(4, pwmCw, 0);
}

static addIdOfStandbyController(builder:flatbuffers.Builder, idOfStandbyController:number) {
  builder.addFieldInt16(5, idOfStandbyController, 0);
}

static addAutoOffMsecs(builder:flatbuffers.Builder, autoOffMsecs:number) {
  builder.addFieldInt32(6, autoOffMsecs, 0);
}

static endtRgbwPwmConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createtRgbwPwmConfig(builder:flatbuffers.Builder, pwmR:number, pwmG:number, pwmB:number, pwmWw:number, pwmCw:number, idOfStandbyController:number, autoOffMsecs:number):flatbuffers.Offset {
  tRgbwPwmConfig.starttRgbwPwmConfig(builder);
  tRgbwPwmConfig.addPwmR(builder, pwmR);
  tRgbwPwmConfig.addPwmG(builder, pwmG);
  tRgbwPwmConfig.addPwmB(builder, pwmB);
  tRgbwPwmConfig.addPwmWw(builder, pwmWw);
  tRgbwPwmConfig.addPwmCw(builder, pwmCw);
  tRgbwPwmConfig.addIdOfStandbyController(builder, idOfStandbyController);
  tRgbwPwmConfig.addAutoOffMsecs(builder, autoOffMsecs);
  return tRgbwPwmConfig.endtRgbwPwmConfig(builder);
}
}
