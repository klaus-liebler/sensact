// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { eOnOffState } from '../../sensact/comm/e-on-off-state.js';


export class tOnOffConfig {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):tOnOffConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAstOnOffConfig(bb:flatbuffers.ByteBuffer, obj?:tOnOffConfig):tOnOffConfig {
  return (obj || new tOnOffConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAstOnOffConfig(bb:flatbuffers.ByteBuffer, obj?:tOnOffConfig):tOnOffConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new tOnOffConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

relay():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

autoOffMsecs():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

initialState():eOnOffState {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : eOnOffState.MANUAL_OFF;
}

static starttOnOffConfig(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addRelay(builder:flatbuffers.Builder, relay:number) {
  builder.addFieldInt16(0, relay, 0);
}

static addAutoOffMsecs(builder:flatbuffers.Builder, autoOffMsecs:number) {
  builder.addFieldInt32(1, autoOffMsecs, 0);
}

static addInitialState(builder:flatbuffers.Builder, initialState:eOnOffState) {
  builder.addFieldInt8(2, initialState, eOnOffState.MANUAL_OFF);
}

static endtOnOffConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createtOnOffConfig(builder:flatbuffers.Builder, relay:number, autoOffMsecs:number, initialState:eOnOffState):flatbuffers.Offset {
  tOnOffConfig.starttOnOffConfig(builder);
  tOnOffConfig.addRelay(builder, relay);
  tOnOffConfig.addAutoOffMsecs(builder, autoOffMsecs);
  tOnOffConfig.addInitialState(builder, initialState);
  return tOnOffConfig.endtOnOffConfig(builder);
}
}
