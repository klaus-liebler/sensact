// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { eRgbwPwmCommand } from '../../sensact/comm/e-rgbw-pwm-command.js';


export class tRgbwPwmCommand {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):tRgbwPwmCommand {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAstRgbwPwmCommand(bb:flatbuffers.ByteBuffer, obj?:tRgbwPwmCommand):tRgbwPwmCommand {
  return (obj || new tRgbwPwmCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAstRgbwPwmCommand(bb:flatbuffers.ByteBuffer, obj?:tRgbwPwmCommand):tRgbwPwmCommand {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new tRgbwPwmCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cmd():eRgbwPwmCommand {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : eRgbwPwmCommand.TOGGLE;
}

payload():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static starttRgbwPwmCommand(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCmd(builder:flatbuffers.Builder, cmd:eRgbwPwmCommand) {
  builder.addFieldInt8(0, cmd, eRgbwPwmCommand.TOGGLE);
}

static addPayload(builder:flatbuffers.Builder, payload:number) {
  builder.addFieldFloat32(1, payload, 0.0);
}

static endtRgbwPwmCommand(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createtRgbwPwmCommand(builder:flatbuffers.Builder, cmd:eRgbwPwmCommand, payload:number):flatbuffers.Offset {
  tRgbwPwmCommand.starttRgbwPwmCommand(builder);
  tRgbwPwmCommand.addCmd(builder, cmd);
  tRgbwPwmCommand.addPayload(builder, payload);
  return tRgbwPwmCommand.endtRgbwPwmCommand(builder);
}
}
