"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.tCommand = void 0;
var flatbuffers = require("flatbuffers");
var u_command_js_1 = require("../../sensact/comm/u-command.js");
var tCommand = /** @class */ (function () {
    function tCommand() {
        this.bb = null;
        this.bb_pos = 0;
    }
    tCommand.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    tCommand.getRootAstCommand = function (bb, obj) {
        return (obj || new tCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    tCommand.getSizePrefixedRootAstCommand = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new tCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    tCommand.bufferHasIdentifier = function (bb) {
        return bb.__has_identifier('SCMD');
    };
    tCommand.prototype.applicationId = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    tCommand.prototype.commandType = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : u_command_js_1.uCommand.NONE;
    };
    tCommand.prototype.command = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    tCommand.starttCommand = function (builder) {
        builder.startObject(3);
    };
    tCommand.addApplicationId = function (builder, applicationId) {
        builder.addFieldInt32(0, applicationId, 0);
    };
    tCommand.addCommandType = function (builder, commandType) {
        builder.addFieldInt8(1, commandType, u_command_js_1.uCommand.NONE);
    };
    tCommand.addCommand = function (builder, commandOffset) {
        builder.addFieldOffset(2, commandOffset, 0);
    };
    tCommand.endtCommand = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    tCommand.finishtCommandBuffer = function (builder, offset) {
        builder.finish(offset, 'SCMD');
    };
    tCommand.finishSizePrefixedtCommandBuffer = function (builder, offset) {
        builder.finish(offset, 'SCMD', true);
    };
    tCommand.createtCommand = function (builder, applicationId, commandType, commandOffset) {
        tCommand.starttCommand(builder);
        tCommand.addApplicationId(builder, applicationId);
        tCommand.addCommandType(builder, commandType);
        tCommand.addCommand(builder, commandOffset);
        return tCommand.endtCommand(builder);
    };
    return tCommand;
}());
exports.tCommand = tCommand;
