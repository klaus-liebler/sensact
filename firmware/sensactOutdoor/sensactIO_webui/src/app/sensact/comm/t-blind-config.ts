// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { eRelayInterlockMode } from '../../sensact/comm/e-relay-interlock-mode.js';


export class tBlindConfig {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):tBlindConfig {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAstBlindConfig(bb:flatbuffers.ByteBuffer, obj?:tBlindConfig):tBlindConfig {
  return (obj || new tBlindConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAstBlindConfig(bb:flatbuffers.ByteBuffer, obj?:tBlindConfig):tBlindConfig {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new tBlindConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

relay1():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

relay2():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

mode():eRelayInterlockMode {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : eRelayInterlockMode.R1_UP__R2_DOWN;
}

timeUpMsecs():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

timeDownMsecs():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static starttBlindConfig(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addRelay1(builder:flatbuffers.Builder, relay1:number) {
  builder.addFieldInt16(0, relay1, 0);
}

static addRelay2(builder:flatbuffers.Builder, relay2:number) {
  builder.addFieldInt16(1, relay2, 0);
}

static addMode(builder:flatbuffers.Builder, mode:eRelayInterlockMode) {
  builder.addFieldInt8(2, mode, eRelayInterlockMode.R1_UP__R2_DOWN);
}

static addTimeUpMsecs(builder:flatbuffers.Builder, timeUpMsecs:number) {
  builder.addFieldInt32(3, timeUpMsecs, 0);
}

static addTimeDownMsecs(builder:flatbuffers.Builder, timeDownMsecs:number) {
  builder.addFieldInt32(4, timeDownMsecs, 0);
}

static endtBlindConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createtBlindConfig(builder:flatbuffers.Builder, relay1:number, relay2:number, mode:eRelayInterlockMode, timeUpMsecs:number, timeDownMsecs:number):flatbuffers.Offset {
  tBlindConfig.starttBlindConfig(builder);
  tBlindConfig.addRelay1(builder, relay1);
  tBlindConfig.addRelay2(builder, relay2);
  tBlindConfig.addMode(builder, mode);
  tBlindConfig.addTimeUpMsecs(builder, timeUpMsecs);
  tBlindConfig.addTimeDownMsecs(builder, timeDownMsecs);
  return tBlindConfig.endtBlindConfig(builder);
}
}
