// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { eOnOffState } from '../../sensact/comm/e-on-off-state.js';


export class tOnOffState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):tOnOffState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAstOnOffState(bb:flatbuffers.ByteBuffer, obj?:tOnOffState):tOnOffState {
  return (obj || new tOnOffState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAstOnOffState(bb:flatbuffers.ByteBuffer, obj?:tOnOffState):tOnOffState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new tOnOffState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

state():eOnOffState {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : eOnOffState.MANUAL_OFF;
}

static starttOnOffState(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addState(builder:flatbuffers.Builder, state:eOnOffState) {
  builder.addFieldInt8(0, state, eOnOffState.MANUAL_OFF);
}

static endtOnOffState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createtOnOffState(builder:flatbuffers.Builder, state:eOnOffState):flatbuffers.Offset {
  tOnOffState.starttOnOffState(builder);
  tOnOffState.addState(builder, state);
  return tOnOffState.endtOnOffState(builder);
}
}
