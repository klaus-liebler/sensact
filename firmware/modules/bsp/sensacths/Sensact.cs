// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensact.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sensact.Messages {

  /// <summary>Holder for reflection information generated from sensact.proto</summary>
  public static partial class SensactReflection {

    #region Descriptor
    /// <summary>File descriptor for sensact.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SensactReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1zZW5zYWN0LnByb3RvEhBzZW5zYWN0Lm1lc3NhZ2VzIkEKCU5vZGVFdmVu",
            "dBIUCgxzb3VyY2VOb2RlSWQYASABKAUSDQoFZXZlbnQYAiABKAUSDwoHcGF5",
            "bG9hZBgDIAEoECJACghBcHBFdmVudBIUCgxzb3VyY2VOb2RlSWQYASABKAUS",
            "DQoFZXZlbnQYAiABKAUSDwoHcGF5bG9hZBgDIAEoECIzCgtCTElORFN0YXR1",
            "cxIPCgdjdXJycG9zGAEgASgFEhMKC3RhcmdldExldmVsGAIgASgFIhwKC0JT",
            "RU5TU3RhdHVzEg0KBXZhbHVlGAEgASgFIh0KC1BPV0lUU3RhdHVzEg4KBmFj",
            "dGl2ZRgBIAEoCCIaCglQV01TdGF0dXMSDQoFbGV2ZWwYASABKAUiOAoKUkdC",
            "V1N0YXR1cxIJCgFSGAEgASgFEgkKAUcYAiABKAUSCQoBQhgDIAEoBRIJCgFX",
            "GAQgASgFIh0KC1NUREJZU3RhdHVzEg4KBmFjdGl2ZRgBIAEoCCK4AgoNU3Rh",
            "dHVzTWVzc2FnZRIuCgVibGluZBgBIAEoCzIdLnNlbnNhY3QubWVzc2FnZXMu",
            "QkxJTkRTdGF0dXNIABIuCgVic2VucxgCIAEoCzIdLnNlbnNhY3QubWVzc2Fn",
            "ZXMuQlNFTlNTdGF0dXNIABIuCgVwb3dpdBgDIAEoCzIdLnNlbnNhY3QubWVz",
            "c2FnZXMuUE9XSVRTdGF0dXNIABIqCgNwd20YBCABKAsyGy5zZW5zYWN0Lm1l",
            "c3NhZ2VzLlBXTVN0YXR1c0gAEiwKBHJnYncYBSABKAsyHC5zZW5zYWN0Lm1l",
            "c3NhZ2VzLlJHQldTdGF0dXNIABIuCgVzdGRieRgGIAEoCzIdLnNlbnNhY3Qu",
            "bWVzc2FnZXMuU1REQllTdGF0dXNIAEINCgtvbmVvZnN0YXR1c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensact.Messages.NodeEvent), global::Sensact.Messages.NodeEvent.Parser, new[]{ "SourceNodeId", "Event", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensact.Messages.AppEvent), global::Sensact.Messages.AppEvent.Parser, new[]{ "SourceNodeId", "Event", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensact.Messages.BLINDStatus), global::Sensact.Messages.BLINDStatus.Parser, new[]{ "Currpos", "TargetLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensact.Messages.BSENSStatus), global::Sensact.Messages.BSENSStatus.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensact.Messages.POWITStatus), global::Sensact.Messages.POWITStatus.Parser, new[]{ "Active" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensact.Messages.PWMStatus), global::Sensact.Messages.PWMStatus.Parser, new[]{ "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensact.Messages.RGBWStatus), global::Sensact.Messages.RGBWStatus.Parser, new[]{ "R", "G", "B", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensact.Messages.STDBYStatus), global::Sensact.Messages.STDBYStatus.Parser, new[]{ "Active" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensact.Messages.StatusMessage), global::Sensact.Messages.StatusMessage.Parser, new[]{ "Blind", "Bsens", "Powit", "Pwm", "Rgbw", "Stdby" }, new[]{ "Oneofstatus" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NodeEvent : pb::IMessage<NodeEvent> {
    private static readonly pb::MessageParser<NodeEvent> _parser = new pb::MessageParser<NodeEvent>(() => new NodeEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensact.Messages.SensactReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeEvent(NodeEvent other) : this() {
      sourceNodeId_ = other.sourceNodeId_;
      event_ = other.event_;
      payload_ = other.payload_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeEvent Clone() {
      return new NodeEvent(this);
    }

    /// <summary>Field number for the "sourceNodeId" field.</summary>
    public const int SourceNodeIdFieldNumber = 1;
    private int sourceNodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceNodeId {
      get { return sourceNodeId_; }
      set {
        sourceNodeId_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 2;
    private int event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 3;
    private long payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceNodeId != other.SourceNodeId) return false;
      if (Event != other.Event) return false;
      if (Payload != other.Payload) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceNodeId != 0) hash ^= SourceNodeId.GetHashCode();
      if (Event != 0) hash ^= Event.GetHashCode();
      if (Payload != 0L) hash ^= Payload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceNodeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceNodeId);
      }
      if (Event != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Event);
      }
      if (Payload != 0L) {
        output.WriteRawTag(25);
        output.WriteSFixed64(Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceNodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceNodeId);
      }
      if (Event != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Event);
      }
      if (Payload != 0L) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeEvent other) {
      if (other == null) {
        return;
      }
      if (other.SourceNodeId != 0) {
        SourceNodeId = other.SourceNodeId;
      }
      if (other.Event != 0) {
        Event = other.Event;
      }
      if (other.Payload != 0L) {
        Payload = other.Payload;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SourceNodeId = input.ReadInt32();
            break;
          }
          case 16: {
            Event = input.ReadInt32();
            break;
          }
          case 25: {
            Payload = input.ReadSFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppEvent : pb::IMessage<AppEvent> {
    private static readonly pb::MessageParser<AppEvent> _parser = new pb::MessageParser<AppEvent>(() => new AppEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensact.Messages.SensactReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppEvent(AppEvent other) : this() {
      sourceNodeId_ = other.sourceNodeId_;
      event_ = other.event_;
      payload_ = other.payload_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppEvent Clone() {
      return new AppEvent(this);
    }

    /// <summary>Field number for the "sourceNodeId" field.</summary>
    public const int SourceNodeIdFieldNumber = 1;
    private int sourceNodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceNodeId {
      get { return sourceNodeId_; }
      set {
        sourceNodeId_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 2;
    private int event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 3;
    private long payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceNodeId != other.SourceNodeId) return false;
      if (Event != other.Event) return false;
      if (Payload != other.Payload) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceNodeId != 0) hash ^= SourceNodeId.GetHashCode();
      if (Event != 0) hash ^= Event.GetHashCode();
      if (Payload != 0L) hash ^= Payload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceNodeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceNodeId);
      }
      if (Event != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Event);
      }
      if (Payload != 0L) {
        output.WriteRawTag(25);
        output.WriteSFixed64(Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceNodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceNodeId);
      }
      if (Event != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Event);
      }
      if (Payload != 0L) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppEvent other) {
      if (other == null) {
        return;
      }
      if (other.SourceNodeId != 0) {
        SourceNodeId = other.SourceNodeId;
      }
      if (other.Event != 0) {
        Event = other.Event;
      }
      if (other.Payload != 0L) {
        Payload = other.Payload;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SourceNodeId = input.ReadInt32();
            break;
          }
          case 16: {
            Event = input.ReadInt32();
            break;
          }
          case 25: {
            Payload = input.ReadSFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BLINDStatus : pb::IMessage<BLINDStatus> {
    private static readonly pb::MessageParser<BLINDStatus> _parser = new pb::MessageParser<BLINDStatus>(() => new BLINDStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BLINDStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensact.Messages.SensactReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BLINDStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BLINDStatus(BLINDStatus other) : this() {
      currpos_ = other.currpos_;
      targetLevel_ = other.targetLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BLINDStatus Clone() {
      return new BLINDStatus(this);
    }

    /// <summary>Field number for the "currpos" field.</summary>
    public const int CurrposFieldNumber = 1;
    private int currpos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Currpos {
      get { return currpos_; }
      set {
        currpos_ = value;
      }
    }

    /// <summary>Field number for the "targetLevel" field.</summary>
    public const int TargetLevelFieldNumber = 2;
    private int targetLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetLevel {
      get { return targetLevel_; }
      set {
        targetLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BLINDStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BLINDStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Currpos != other.Currpos) return false;
      if (TargetLevel != other.TargetLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Currpos != 0) hash ^= Currpos.GetHashCode();
      if (TargetLevel != 0) hash ^= TargetLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Currpos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Currpos);
      }
      if (TargetLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Currpos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Currpos);
      }
      if (TargetLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BLINDStatus other) {
      if (other == null) {
        return;
      }
      if (other.Currpos != 0) {
        Currpos = other.Currpos;
      }
      if (other.TargetLevel != 0) {
        TargetLevel = other.TargetLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Currpos = input.ReadInt32();
            break;
          }
          case 16: {
            TargetLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BSENSStatus : pb::IMessage<BSENSStatus> {
    private static readonly pb::MessageParser<BSENSStatus> _parser = new pb::MessageParser<BSENSStatus>(() => new BSENSStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BSENSStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensact.Messages.SensactReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BSENSStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BSENSStatus(BSENSStatus other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BSENSStatus Clone() {
      return new BSENSStatus(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BSENSStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BSENSStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BSENSStatus other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class POWITStatus : pb::IMessage<POWITStatus> {
    private static readonly pb::MessageParser<POWITStatus> _parser = new pb::MessageParser<POWITStatus>(() => new POWITStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<POWITStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensact.Messages.SensactReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public POWITStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public POWITStatus(POWITStatus other) : this() {
      active_ = other.active_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public POWITStatus Clone() {
      return new POWITStatus(this);
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 1;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as POWITStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(POWITStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Active != other.Active) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Active != false) hash ^= Active.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Active != false) {
        output.WriteRawTag(8);
        output.WriteBool(Active);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Active != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(POWITStatus other) {
      if (other == null) {
        return;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Active = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PWMStatus : pb::IMessage<PWMStatus> {
    private static readonly pb::MessageParser<PWMStatus> _parser = new pb::MessageParser<PWMStatus>(() => new PWMStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PWMStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensact.Messages.SensactReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PWMStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PWMStatus(PWMStatus other) : this() {
      level_ = other.level_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PWMStatus Clone() {
      return new PWMStatus(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PWMStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PWMStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PWMStatus other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RGBWStatus : pb::IMessage<RGBWStatus> {
    private static readonly pb::MessageParser<RGBWStatus> _parser = new pb::MessageParser<RGBWStatus>(() => new RGBWStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RGBWStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensact.Messages.SensactReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RGBWStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RGBWStatus(RGBWStatus other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
      w_ = other.w_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RGBWStatus Clone() {
      return new RGBWStatus(this);
    }

    /// <summary>Field number for the "R" field.</summary>
    public const int RFieldNumber = 1;
    private int r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "G" field.</summary>
    public const int GFieldNumber = 2;
    private int g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "B" field.</summary>
    public const int BFieldNumber = 3;
    private int b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "W" field.</summary>
    public const int WFieldNumber = 4;
    private int w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RGBWStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RGBWStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (R != other.R) return false;
      if (G != other.G) return false;
      if (B != other.B) return false;
      if (W != other.W) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0) hash ^= R.GetHashCode();
      if (G != 0) hash ^= G.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      if (W != 0) hash ^= W.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(R);
      }
      if (G != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(G);
      }
      if (B != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(B);
      }
      if (W != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(W);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(R);
      }
      if (G != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(G);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(B);
      }
      if (W != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(W);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RGBWStatus other) {
      if (other == null) {
        return;
      }
      if (other.R != 0) {
        R = other.R;
      }
      if (other.G != 0) {
        G = other.G;
      }
      if (other.B != 0) {
        B = other.B;
      }
      if (other.W != 0) {
        W = other.W;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            R = input.ReadInt32();
            break;
          }
          case 16: {
            G = input.ReadInt32();
            break;
          }
          case 24: {
            B = input.ReadInt32();
            break;
          }
          case 32: {
            W = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class STDBYStatus : pb::IMessage<STDBYStatus> {
    private static readonly pb::MessageParser<STDBYStatus> _parser = new pb::MessageParser<STDBYStatus>(() => new STDBYStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<STDBYStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensact.Messages.SensactReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STDBYStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STDBYStatus(STDBYStatus other) : this() {
      active_ = other.active_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public STDBYStatus Clone() {
      return new STDBYStatus(this);
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 1;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as STDBYStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(STDBYStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Active != other.Active) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Active != false) hash ^= Active.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Active != false) {
        output.WriteRawTag(8);
        output.WriteBool(Active);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Active != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(STDBYStatus other) {
      if (other == null) {
        return;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Active = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusMessage : pb::IMessage<StatusMessage> {
    private static readonly pb::MessageParser<StatusMessage> _parser = new pb::MessageParser<StatusMessage>(() => new StatusMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensact.Messages.SensactReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMessage(StatusMessage other) : this() {
      switch (other.OneofstatusCase) {
        case OneofstatusOneofCase.Blind:
          Blind = other.Blind.Clone();
          break;
        case OneofstatusOneofCase.Bsens:
          Bsens = other.Bsens.Clone();
          break;
        case OneofstatusOneofCase.Powit:
          Powit = other.Powit.Clone();
          break;
        case OneofstatusOneofCase.Pwm:
          Pwm = other.Pwm.Clone();
          break;
        case OneofstatusOneofCase.Rgbw:
          Rgbw = other.Rgbw.Clone();
          break;
        case OneofstatusOneofCase.Stdby:
          Stdby = other.Stdby.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusMessage Clone() {
      return new StatusMessage(this);
    }

    /// <summary>Field number for the "blind" field.</summary>
    public const int BlindFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sensact.Messages.BLINDStatus Blind {
      get { return oneofstatusCase_ == OneofstatusOneofCase.Blind ? (global::Sensact.Messages.BLINDStatus) oneofstatus_ : null; }
      set {
        oneofstatus_ = value;
        oneofstatusCase_ = value == null ? OneofstatusOneofCase.None : OneofstatusOneofCase.Blind;
      }
    }

    /// <summary>Field number for the "bsens" field.</summary>
    public const int BsensFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sensact.Messages.BSENSStatus Bsens {
      get { return oneofstatusCase_ == OneofstatusOneofCase.Bsens ? (global::Sensact.Messages.BSENSStatus) oneofstatus_ : null; }
      set {
        oneofstatus_ = value;
        oneofstatusCase_ = value == null ? OneofstatusOneofCase.None : OneofstatusOneofCase.Bsens;
      }
    }

    /// <summary>Field number for the "powit" field.</summary>
    public const int PowitFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sensact.Messages.POWITStatus Powit {
      get { return oneofstatusCase_ == OneofstatusOneofCase.Powit ? (global::Sensact.Messages.POWITStatus) oneofstatus_ : null; }
      set {
        oneofstatus_ = value;
        oneofstatusCase_ = value == null ? OneofstatusOneofCase.None : OneofstatusOneofCase.Powit;
      }
    }

    /// <summary>Field number for the "pwm" field.</summary>
    public const int PwmFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sensact.Messages.PWMStatus Pwm {
      get { return oneofstatusCase_ == OneofstatusOneofCase.Pwm ? (global::Sensact.Messages.PWMStatus) oneofstatus_ : null; }
      set {
        oneofstatus_ = value;
        oneofstatusCase_ = value == null ? OneofstatusOneofCase.None : OneofstatusOneofCase.Pwm;
      }
    }

    /// <summary>Field number for the "rgbw" field.</summary>
    public const int RgbwFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sensact.Messages.RGBWStatus Rgbw {
      get { return oneofstatusCase_ == OneofstatusOneofCase.Rgbw ? (global::Sensact.Messages.RGBWStatus) oneofstatus_ : null; }
      set {
        oneofstatus_ = value;
        oneofstatusCase_ = value == null ? OneofstatusOneofCase.None : OneofstatusOneofCase.Rgbw;
      }
    }

    /// <summary>Field number for the "stdby" field.</summary>
    public const int StdbyFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sensact.Messages.STDBYStatus Stdby {
      get { return oneofstatusCase_ == OneofstatusOneofCase.Stdby ? (global::Sensact.Messages.STDBYStatus) oneofstatus_ : null; }
      set {
        oneofstatus_ = value;
        oneofstatusCase_ = value == null ? OneofstatusOneofCase.None : OneofstatusOneofCase.Stdby;
      }
    }

    private object oneofstatus_;
    /// <summary>Enum of possible cases for the "oneofstatus" oneof.</summary>
    public enum OneofstatusOneofCase {
      None = 0,
      Blind = 1,
      Bsens = 2,
      Powit = 3,
      Pwm = 4,
      Rgbw = 5,
      Stdby = 6,
    }
    private OneofstatusOneofCase oneofstatusCase_ = OneofstatusOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneofstatusOneofCase OneofstatusCase {
      get { return oneofstatusCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOneofstatus() {
      oneofstatusCase_ = OneofstatusOneofCase.None;
      oneofstatus_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Blind, other.Blind)) return false;
      if (!object.Equals(Bsens, other.Bsens)) return false;
      if (!object.Equals(Powit, other.Powit)) return false;
      if (!object.Equals(Pwm, other.Pwm)) return false;
      if (!object.Equals(Rgbw, other.Rgbw)) return false;
      if (!object.Equals(Stdby, other.Stdby)) return false;
      if (OneofstatusCase != other.OneofstatusCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (oneofstatusCase_ == OneofstatusOneofCase.Blind) hash ^= Blind.GetHashCode();
      if (oneofstatusCase_ == OneofstatusOneofCase.Bsens) hash ^= Bsens.GetHashCode();
      if (oneofstatusCase_ == OneofstatusOneofCase.Powit) hash ^= Powit.GetHashCode();
      if (oneofstatusCase_ == OneofstatusOneofCase.Pwm) hash ^= Pwm.GetHashCode();
      if (oneofstatusCase_ == OneofstatusOneofCase.Rgbw) hash ^= Rgbw.GetHashCode();
      if (oneofstatusCase_ == OneofstatusOneofCase.Stdby) hash ^= Stdby.GetHashCode();
      hash ^= (int) oneofstatusCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (oneofstatusCase_ == OneofstatusOneofCase.Blind) {
        output.WriteRawTag(10);
        output.WriteMessage(Blind);
      }
      if (oneofstatusCase_ == OneofstatusOneofCase.Bsens) {
        output.WriteRawTag(18);
        output.WriteMessage(Bsens);
      }
      if (oneofstatusCase_ == OneofstatusOneofCase.Powit) {
        output.WriteRawTag(26);
        output.WriteMessage(Powit);
      }
      if (oneofstatusCase_ == OneofstatusOneofCase.Pwm) {
        output.WriteRawTag(34);
        output.WriteMessage(Pwm);
      }
      if (oneofstatusCase_ == OneofstatusOneofCase.Rgbw) {
        output.WriteRawTag(42);
        output.WriteMessage(Rgbw);
      }
      if (oneofstatusCase_ == OneofstatusOneofCase.Stdby) {
        output.WriteRawTag(50);
        output.WriteMessage(Stdby);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (oneofstatusCase_ == OneofstatusOneofCase.Blind) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blind);
      }
      if (oneofstatusCase_ == OneofstatusOneofCase.Bsens) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bsens);
      }
      if (oneofstatusCase_ == OneofstatusOneofCase.Powit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Powit);
      }
      if (oneofstatusCase_ == OneofstatusOneofCase.Pwm) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pwm);
      }
      if (oneofstatusCase_ == OneofstatusOneofCase.Rgbw) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rgbw);
      }
      if (oneofstatusCase_ == OneofstatusOneofCase.Stdby) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stdby);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusMessage other) {
      if (other == null) {
        return;
      }
      switch (other.OneofstatusCase) {
        case OneofstatusOneofCase.Blind:
          Blind = other.Blind;
          break;
        case OneofstatusOneofCase.Bsens:
          Bsens = other.Bsens;
          break;
        case OneofstatusOneofCase.Powit:
          Powit = other.Powit;
          break;
        case OneofstatusOneofCase.Pwm:
          Pwm = other.Pwm;
          break;
        case OneofstatusOneofCase.Rgbw:
          Rgbw = other.Rgbw;
          break;
        case OneofstatusOneofCase.Stdby:
          Stdby = other.Stdby;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Sensact.Messages.BLINDStatus subBuilder = new global::Sensact.Messages.BLINDStatus();
            if (oneofstatusCase_ == OneofstatusOneofCase.Blind) {
              subBuilder.MergeFrom(Blind);
            }
            input.ReadMessage(subBuilder);
            Blind = subBuilder;
            break;
          }
          case 18: {
            global::Sensact.Messages.BSENSStatus subBuilder = new global::Sensact.Messages.BSENSStatus();
            if (oneofstatusCase_ == OneofstatusOneofCase.Bsens) {
              subBuilder.MergeFrom(Bsens);
            }
            input.ReadMessage(subBuilder);
            Bsens = subBuilder;
            break;
          }
          case 26: {
            global::Sensact.Messages.POWITStatus subBuilder = new global::Sensact.Messages.POWITStatus();
            if (oneofstatusCase_ == OneofstatusOneofCase.Powit) {
              subBuilder.MergeFrom(Powit);
            }
            input.ReadMessage(subBuilder);
            Powit = subBuilder;
            break;
          }
          case 34: {
            global::Sensact.Messages.PWMStatus subBuilder = new global::Sensact.Messages.PWMStatus();
            if (oneofstatusCase_ == OneofstatusOneofCase.Pwm) {
              subBuilder.MergeFrom(Pwm);
            }
            input.ReadMessage(subBuilder);
            Pwm = subBuilder;
            break;
          }
          case 42: {
            global::Sensact.Messages.RGBWStatus subBuilder = new global::Sensact.Messages.RGBWStatus();
            if (oneofstatusCase_ == OneofstatusOneofCase.Rgbw) {
              subBuilder.MergeFrom(Rgbw);
            }
            input.ReadMessage(subBuilder);
            Rgbw = subBuilder;
            break;
          }
          case 50: {
            global::Sensact.Messages.STDBYStatus subBuilder = new global::Sensact.Messages.STDBYStatus();
            if (oneofstatusCase_ == OneofstatusOneofCase.Stdby) {
              subBuilder.MergeFrom(Stdby);
            }
            input.ReadMessage(subBuilder);
            Stdby = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
