"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.tState = void 0;
var flatbuffers = require("flatbuffers");
var t_state_wrapper_js_1 = require("../../sensact/comm/t-state-wrapper.js");
var tState = /** @class */ (function () {
    function tState() {
        this.bb = null;
        this.bb_pos = 0;
    }
    tState.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    tState.getRootAstState = function (bb, obj) {
        return (obj || new tState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    tState.getSizePrefixedRootAstState = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new tState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    tState.bufferHasIdentifier = function (bb) {
        return bb.__has_identifier('SSTA');
    };
    tState.prototype.timestamp = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    tState.prototype.states = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new t_state_wrapper_js_1.tStateWrapper()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    tState.prototype.statesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    tState.starttState = function (builder) {
        builder.startObject(2);
    };
    tState.addTimestamp = function (builder, timestamp) {
        builder.addFieldInt32(0, timestamp, 0);
    };
    tState.addStates = function (builder, statesOffset) {
        builder.addFieldOffset(1, statesOffset, 0);
    };
    tState.createStatesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    tState.startStatesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    tState.endtState = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    tState.finishtStateBuffer = function (builder, offset) {
        builder.finish(offset, 'SSTA');
    };
    tState.finishSizePrefixedtStateBuffer = function (builder, offset) {
        builder.finish(offset, 'SSTA', true);
    };
    tState.createtState = function (builder, timestamp, statesOffset) {
        tState.starttState(builder);
        tState.addTimestamp(builder, timestamp);
        tState.addStates(builder, statesOffset);
        return tState.endtState(builder);
    };
    return tState;
}());
exports.tState = tState;
