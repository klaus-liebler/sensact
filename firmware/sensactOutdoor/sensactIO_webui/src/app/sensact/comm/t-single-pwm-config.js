"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.tSinglePwmConfig = void 0;
var flatbuffers = require("flatbuffers");
var tSinglePwmConfig = /** @class */ (function () {
    function tSinglePwmConfig() {
        this.bb = null;
        this.bb_pos = 0;
    }
    tSinglePwmConfig.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    tSinglePwmConfig.getRootAstSinglePwmConfig = function (bb, obj) {
        return (obj || new tSinglePwmConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    tSinglePwmConfig.getSizePrefixedRootAstSinglePwmConfig = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new tSinglePwmConfig()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    tSinglePwmConfig.prototype.pwmFirst = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    };
    tSinglePwmConfig.prototype.pwmLast = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    };
    tSinglePwmConfig.prototype.idOfStandbyController = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    };
    tSinglePwmConfig.prototype.autoOffMsecs = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    tSinglePwmConfig.starttSinglePwmConfig = function (builder) {
        builder.startObject(4);
    };
    tSinglePwmConfig.addPwmFirst = function (builder, pwmFirst) {
        builder.addFieldInt16(0, pwmFirst, 0);
    };
    tSinglePwmConfig.addPwmLast = function (builder, pwmLast) {
        builder.addFieldInt16(1, pwmLast, 0);
    };
    tSinglePwmConfig.addIdOfStandbyController = function (builder, idOfStandbyController) {
        builder.addFieldInt16(2, idOfStandbyController, 0);
    };
    tSinglePwmConfig.addAutoOffMsecs = function (builder, autoOffMsecs) {
        builder.addFieldInt32(3, autoOffMsecs, 0);
    };
    tSinglePwmConfig.endtSinglePwmConfig = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    tSinglePwmConfig.createtSinglePwmConfig = function (builder, pwmFirst, pwmLast, idOfStandbyController, autoOffMsecs) {
        tSinglePwmConfig.starttSinglePwmConfig(builder);
        tSinglePwmConfig.addPwmFirst(builder, pwmFirst);
        tSinglePwmConfig.addPwmLast(builder, pwmLast);
        tSinglePwmConfig.addIdOfStandbyController(builder, idOfStandbyController);
        tSinglePwmConfig.addAutoOffMsecs(builder, autoOffMsecs);
        return tSinglePwmConfig.endtSinglePwmConfig(builder);
    };
    return tSinglePwmConfig;
}());
exports.tSinglePwmConfig = tSinglePwmConfig;
