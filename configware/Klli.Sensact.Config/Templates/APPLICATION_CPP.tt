<#@ template language="C#" inherits="CommonFileHeader" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# RenderHeader("Application.cpp", "autogen", version, "Short", "Details"); #>

#include <cApplication.h>
#include <cLog.h>
#include <cModel.h>

namespace sensact {
void cApplication::OnCommand(eCommandType cmd, uint8_t *payload,
		uint8_t payloadLength, Time_t now) {
	switch(cmd)
	{
<#foreach(CommandType ct in Commands){ #>
		case eCommandType::<#=Convert.ToString(ct)#>: On<#=Convert.ToString(ct)#>Command(payload, payloadLength, now); break;
<#}#>
		case eCommandType::CNT:break;
	}
	return;
}
<#foreach(CommandType ct in Commands){ #>
void cApplication::On<#=Convert.ToString(ct)#>Command(uint8_t *payload,
		uint8_t payloadLength, Time_t now)
{
	(void)(payload);
	(void)(payloadLength);
	(void)(now);
	LOGE("Application %s does not support Command <#=Convert.ToString(ct)#>", Name);
}
<#}#>

void cApplication::OnEvent(eApplicationID sender, eEventType evt,
			uint8_t *payload, uint8_t payloadLength, Time_t now) {
		(void) sender;
		(void) evt;
		(void) payload;
		(void) payloadLength;
		(void) now;
		return;
	}
int16_t cApplication::ParseInt16(uint8_t *message, uint32_t offset)
{
	int16_t step;
	uint8_t* ptr1=(uint8_t*)&step;
	uint8_t* ptr2 = ptr1+1;
	*ptr1 = *(message+offset);
	*ptr2 = *(message+offset+1);
	return step;
}

void cApplication::WriteInt16(uint16_t value, uint8_t *message, uint32_t offset)
{
	uint8_t* ptr1=(uint8_t*)&value;
	uint8_t* ptr2 = ptr1+1;
	*(message+offset) = *ptr1;
	*(message+offset+1) = *ptr2;
}

} /* namespace sensact */
