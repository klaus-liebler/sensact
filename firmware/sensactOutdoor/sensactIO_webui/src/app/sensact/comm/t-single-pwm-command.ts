// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { eSinglePwmCommand } from '../../sensact/comm/e-single-pwm-command.js';


export class tSinglePwmCommand {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):tSinglePwmCommand {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAstSinglePwmCommand(bb:flatbuffers.ByteBuffer, obj?:tSinglePwmCommand):tSinglePwmCommand {
  return (obj || new tSinglePwmCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAstSinglePwmCommand(bb:flatbuffers.ByteBuffer, obj?:tSinglePwmCommand):tSinglePwmCommand {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new tSinglePwmCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cmd():eSinglePwmCommand {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : eSinglePwmCommand.TOGGLE;
}

intensity01():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static starttSinglePwmCommand(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCmd(builder:flatbuffers.Builder, cmd:eSinglePwmCommand) {
  builder.addFieldInt8(0, cmd, eSinglePwmCommand.TOGGLE);
}

static addIntensity01(builder:flatbuffers.Builder, intensity01:number) {
  builder.addFieldFloat32(1, intensity01, 0.0);
}

static endtSinglePwmCommand(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createtSinglePwmCommand(builder:flatbuffers.Builder, cmd:eSinglePwmCommand, intensity01:number):flatbuffers.Offset {
  tSinglePwmCommand.starttSinglePwmCommand(builder);
  tSinglePwmCommand.addCmd(builder, cmd);
  tSinglePwmCommand.addIntensity01(builder, intensity01);
  return tSinglePwmCommand.endtSinglePwmCommand(builder);
}
}
