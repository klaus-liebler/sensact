"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.tConfigWrapper = void 0;
var flatbuffers = require("flatbuffers");
var u_config_js_1 = require("../../sensact/comm/u-config.js");
var tConfigWrapper = /** @class */ (function () {
    function tConfigWrapper() {
        this.bb = null;
        this.bb_pos = 0;
    }
    tConfigWrapper.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    tConfigWrapper.getRootAstConfigWrapper = function (bb, obj) {
        return (obj || new tConfigWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    tConfigWrapper.getSizePrefixedRootAstConfigWrapper = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new tConfigWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    tConfigWrapper.prototype.configType = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : u_config_js_1.uConfig.NONE;
    };
    tConfigWrapper.prototype.config = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    tConfigWrapper.starttConfigWrapper = function (builder) {
        builder.startObject(2);
    };
    tConfigWrapper.addConfigType = function (builder, configType) {
        builder.addFieldInt8(0, configType, u_config_js_1.uConfig.NONE);
    };
    tConfigWrapper.addConfig = function (builder, configOffset) {
        builder.addFieldOffset(1, configOffset, 0);
    };
    tConfigWrapper.endtConfigWrapper = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    tConfigWrapper.createtConfigWrapper = function (builder, configType, configOffset) {
        tConfigWrapper.starttConfigWrapper(builder);
        tConfigWrapper.addConfigType(builder, configType);
        tConfigWrapper.addConfig(builder, configOffset);
        return tConfigWrapper.endtConfigWrapper(builder);
    };
    return tConfigWrapper;
}());
exports.tConfigWrapper = tConfigWrapper;
