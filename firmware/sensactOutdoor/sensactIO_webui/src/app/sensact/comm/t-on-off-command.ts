// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { eOnOffCommand } from '../../sensact/comm/e-on-off-command.js';


export class tOnOffCommand {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):tOnOffCommand {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAstOnOffCommand(bb:flatbuffers.ByteBuffer, obj?:tOnOffCommand):tOnOffCommand {
  return (obj || new tOnOffCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAstOnOffCommand(bb:flatbuffers.ByteBuffer, obj?:tOnOffCommand):tOnOffCommand {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new tOnOffCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cmd():eOnOffCommand {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : eOnOffCommand.ON;
}

msecs():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static starttOnOffCommand(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCmd(builder:flatbuffers.Builder, cmd:eOnOffCommand) {
  builder.addFieldInt8(0, cmd, eOnOffCommand.ON);
}

static addMsecs(builder:flatbuffers.Builder, msecs:number) {
  builder.addFieldInt32(1, msecs, 0);
}

static endtOnOffCommand(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createtOnOffCommand(builder:flatbuffers.Builder, cmd:eOnOffCommand, msecs:number):flatbuffers.Offset {
  tOnOffCommand.starttOnOffCommand(builder);
  tOnOffCommand.addCmd(builder, cmd);
  tOnOffCommand.addMsecs(builder, msecs);
  return tOnOffCommand.endtOnOffCommand(builder);
}
}
